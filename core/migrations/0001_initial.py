# Generated by Django 5.2 on 2025-06-23 16:43

import django.db.models.deletion
import tinymce.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Имя')),
                ('email', models.EmailField(max_length=254, verbose_name='Email')),
                ('message', models.TextField(verbose_name='Сообщение')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('is_processed', models.BooleanField(default=False, verbose_name='Обработано')),
                ('response', models.TextField(blank=True, null=True, verbose_name='Ответ администратора')),
                ('response_date', models.DateTimeField(blank=True, null=True, verbose_name='Дата ответа')),
                ('category', models.CharField(choices=[('bug', 'Ошибка на сайте'), ('suggestion', 'Предложение'), ('question', 'Вопрос'), ('other', 'Другое')], default='question', max_length=50, verbose_name='Категория')),
            ],
            options={
                'verbose_name': 'обратная связь',
                'verbose_name_plural': 'Обратная связь',
                'ordering': ['-created_at'],
                'permissions': [('can_respond', 'Может отвечать на обращения')],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', tinymce.models.HTMLField(verbose_name='Текст вопроса')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок')),
                ('points', models.PositiveIntegerField(default=1, verbose_name='Баллы за вопрос')),
            ],
            options={
                'verbose_name': 'вопрос',
                'verbose_name_plural': 'Вопросы',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Название')),
                ('slug', models.SlugField(max_length=200, unique=True, verbose_name='URL')),
                ('description', tinymce.models.HTMLField(verbose_name='Описание')),
                ('short_description', models.TextField(max_length=300, verbose_name='Краткое описание')),
                ('image', models.ImageField(help_text='Рекомендуемый размер: 1200x600px', upload_to='courses/covers/', verbose_name='Изображение')),
                ('difficulty', models.PositiveSmallIntegerField(choices=[(1, 'Начинающий'), (2, 'Средний'), (3, 'Продвинутый')], default=1, verbose_name='Сложность')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активный')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('duration', models.PositiveIntegerField(default=0, help_text='Общая продолжительность курса в минутах', verbose_name='Длительность (минуты)')),
            ],
            options={
                'verbose_name': 'курс',
                'verbose_name_plural': 'Курсы',
                'ordering': ['order'],
                'constraints': [models.CheckConstraint(condition=models.Q(('difficulty__gte', 1), ('difficulty__lte', 3)), name='difficulty_range')],
            },
        ),
        migrations.CreateModel(
            name='Lecture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Название')),
                ('slug', models.SlugField(max_length=200, verbose_name='URL')),
                ('content', tinymce.models.HTMLField(verbose_name='Содержание')),
                ('video_url', models.URLField(blank=True, help_text='URL видео с YouTube или другого сервиса', null=True, verbose_name='Ссылка на видео')),
                ('duration', models.PositiveIntegerField(default=0, verbose_name='Длительность (минуты)')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок')),
                ('is_published', models.BooleanField(default=True, verbose_name='Опубликовано')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('resources', models.FileField(blank=True, null=True, upload_to='lectures/resources/', verbose_name='Дополнительные материалы')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lectures', to='core.course', verbose_name='Курс')),
            ],
            options={
                'verbose_name': 'лекция',
                'verbose_name_plural': 'Лекции',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Текст ответа')),
                ('is_correct', models.BooleanField(default=False, verbose_name='Правильный ответ')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок')),
                ('explanation', models.TextField(blank=True, help_text='Пояснение почему ответ правильный/неправильный', null=True, verbose_name='Объяснение ответа')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='core.question', verbose_name='Вопрос')),
            ],
            options={
                'verbose_name': 'ответ',
                'verbose_name_plural': 'Ответы',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Название')),
                ('description', tinymce.models.HTMLField(verbose_name='Описание')),
                ('task_type', models.CharField(choices=[('quiz', 'Тест'), ('code', 'Код'), ('ctf', 'CTF задание'), ('theory', 'Теоретическое задание')], default='theory', max_length=10, verbose_name='Тип задания')),
                ('flag', models.CharField(blank=True, help_text='Флаг в формате FLAG{...}', max_length=200, null=True, verbose_name='Флаг (для CTF)')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('max_score', models.PositiveIntegerField(default=10, verbose_name='Максимальный балл')),
                ('lecture', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='core.lecture', verbose_name='Лекция')),
            ],
            options={
                'verbose_name': 'задание',
                'verbose_name_plural': 'Задания',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Название')),
                ('description', tinymce.models.HTMLField(verbose_name='Описание')),
                ('is_published', models.BooleanField(default=True, verbose_name='Опубликовано')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('time_limit', models.PositiveIntegerField(default=30, help_text='Время на прохождение теста в минутах', verbose_name='Лимит времени (минуты)')),
                ('passing_score', models.PositiveIntegerField(default=60, help_text='Минимальный процент для успешного прохождения', verbose_name='Проходной балл (%)')),
                ('lecture', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tests', to='core.lecture', verbose_name='Лекция')),
            ],
            options={
                'verbose_name': 'тест',
                'verbose_name_plural': 'Тесты',
                'ordering': ['created_at'],
            },
        ),
        migrations.AddField(
            model_name='question',
            name='test',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='core.test', verbose_name='Тест'),
        ),
        migrations.CreateModel(
            name='UserProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completed', models.BooleanField(default=False, verbose_name='Завершено')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата завершения')),
                ('last_accessed', models.DateTimeField(auto_now=True, verbose_name='Последний доступ')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Заметки пользователя')),
                ('lecture', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.lecture', verbose_name='Лекция')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'прогресс пользователя',
                'verbose_name_plural': 'Прогресс пользователей',
            },
        ),
        migrations.CreateModel(
            name='UserTestResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.PositiveIntegerField(verbose_name='Баллы')),
                ('completed_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата завершения')),
                ('details', models.JSONField(blank=True, default=dict, verbose_name='Детали результатов')),
                ('is_passed', models.BooleanField(default=False, verbose_name='Пройден успешно')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.test', verbose_name='Тест')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'результат теста',
                'verbose_name_plural': 'Результаты тестов',
                'ordering': ['-completed_at'],
            },
        ),
        migrations.AddConstraint(
            model_name='lecture',
            constraint=models.UniqueConstraint(fields=('course', 'order'), name='unique_lecture_order_per_course'),
        ),
        migrations.AlterUniqueTogether(
            name='lecture',
            unique_together={('course', 'slug')},
        ),
        migrations.AddConstraint(
            model_name='task',
            constraint=models.CheckConstraint(condition=models.Q(('max_score__gte', 1), ('max_score__lte', 100)), name='max_score_range'),
        ),
        migrations.AddConstraint(
            model_name='test',
            constraint=models.CheckConstraint(condition=models.Q(('passing_score__gte', 1), ('passing_score__lte', 100)), name='passing_score_range'),
        ),
        migrations.AddIndex(
            model_name='userprogress',
            index=models.Index(fields=['user', 'completed'], name='core_userpr_user_id_8dcdb8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userprogress',
            unique_together={('user', 'lecture')},
        ),
        migrations.AddIndex(
            model_name='usertestresult',
            index=models.Index(fields=['user', 'test'], name='core_userte_user_id_01345b_idx'),
        ),
    ]
